//
// Copyright 2024 Toyota Connected North America
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <string>
#include <utility>

namespace carverx5_cnc_plugin {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string &channel_name) {
  return FlutterError("channel-error",
                      "Unable to establish connection on channel: '" +
                          channel_name + "'.",
                      EncodableValue(""));
}

// Sets up an instance of `CarverX5CncApi` to handle messages through the
// `binary_messenger`.
void CarverX5CncApi::SetUp(flutter::BinaryMessenger *binary_messenger,
                           CarverX5CncApi *api) {
  SetUp(binary_messenger, api, "");
}

void CarverX5CncApi::SetUp(flutter::BinaryMessenger *binary_messenger,
                           CarverX5CncApi *api,
                           const std::string &message_channel_suffix) {
  const std::string prepended_suffix =
      !message_channel_suffix.empty()
          ? std::string(".") + message_channel_suffix
          : "";
  {
    const BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.carverx5_cnc_plugin."
        "CarverX5CncApi.getPlatformVersion" +
            prepended_suffix,
        &flutter::StandardMessageCodec::GetInstance());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue & /* message */,
                const flutter::MessageReply<EncodableValue> &reply) {
            try {
              ErrorOr<std::string> output = api->GetPlatformVersion();
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.emplace_back(std::move(output).TakeValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception &exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    const BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.carverx5_cnc_plugin.CarverX5CncApi.getTty" +
            prepended_suffix,
        &flutter::StandardMessageCodec::GetInstance());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue & /* message */,
                const flutter::MessageReply<EncodableValue> &reply) {
            try {
              ErrorOr<std::string> output = api->GetTty();
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.emplace_back(std::move(output).TakeValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception &exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue CarverX5CncApi::WrapError(std::string_view error_message) {
  return EncodableValue(
      EncodableList{EncodableValue(std::string(error_message)),
                    EncodableValue("Error"), EncodableValue()});
}

EncodableValue CarverX5CncApi::WrapError(const FlutterError &error) {
  return EncodableValue(EncodableList{EncodableValue(error.code()),
                                      EncodableValue(error.message()),
                                      error.details()});
}

} // namespace carverx5_cnc_plugin
